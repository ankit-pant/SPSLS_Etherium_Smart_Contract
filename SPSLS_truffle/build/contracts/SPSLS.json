{
  "contractName": "SPSLS",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "bid"
        },
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "constructor"
    },
    {
      "name": "get_owner_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 513
    },
    {
      "name": "get_fee",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 543
    },
    {
      "name": "register",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 146237
    },
    {
      "name": "human_opponent",
      "outputs": [],
      "inputs": [
        {
          "type": "bool",
          "name": "oppn"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 35865
    },
    {
      "name": "play",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "ch"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 296944
    },
    {
      "name": "num_players",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 783
    },
    {
      "name": "playerPayout",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 967
    },
    {
      "name": "opponent",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 997
    },
    {
      "name": "winner",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6634
    },
    {
      "name": "game_counts",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 903
    },
    {
      "name": "iter_counts",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 933
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526040610abe6101403934156100a157600080fd5b60206020610abe0160c03960c05160205181106100bd57600080fd5b50610140516000556000600155610160516007556000600855600a600955610aa656600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b600015610144575b610180526101405261016052600054610160511060026001541015171561013457600060006000600061016051610140516000f161012657600080fd5b600060005260005161018051565b6001600052600051610180515650005b600015610196575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417600052600051610160515650005b631aa3a0086000511415610315576101405163619ea80661018052336101a0526101a0516006580161014c565b6102005261014052610200516101405261014051156101f757600060006000600034336000f16101f257600080fd5b610313565b6101405161016051610180516101a0516101c0516101e05161020051635d0e94b261024052336102605234610280526102805161026051600658016100e9565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e051610140526101405161026c57600080fd5b33600261027857600080fd5b6002600154066002811061028b57600080fd5b600260c052602060c0200160c052602060c0205560018054600182540110156102b357600080fd5b60018154018155506000543411156103125760033360e05260c052604060c02080546000543410156102e457600080fd5b600054340382540110156102f757600080fd5b60005434101561030657600080fd5b60005434038154018155505b5b005b639d77dfb1600051141561036057341561032e57600080fd5b6004356002811061033e57600080fd5b506008541561034c57600080fd5b60043560043360e05260c052604060c02055005b600015610419575b61018052610140526101605261016051600561038357600080fd5b60056101405160016101405101101561039b57600080fd5b600161014051010614156103bd57610160516000526000516101805156610417565b6101605160056103cc57600080fd5b6005610140516002610140510110156103e457600080fd5b6002610140510106141561040657610160516000526000516101805156610416565b6101405160005260005161018051565b5b005b600015610658575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c05160065801610368565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610534576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561050757610529565b61012051602002850151610120518501555b81516001018083528114156104f4575b505050505050610652565b6006546101605114156105cb5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b8261012051602002111561059e576105c0565b61012051602002850151610120518501555b815160010180835281141561058b575b505050505050610651565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b826101205160200211156106285761064a565b61012051602002850151610120518501555b8151600101808352811415610615575b5050505050505b5b61014051565b636898f82b60005114156107eb57341561067157600080fd5b6009546008541015610760576000600435101561068d57600080fd5b6004600435111561069d57600080fd5b6004356002600260c052602060c02060c052602060c0200155600160043360e05260c052604060c0205414156106d257610743565b60065801610421565b6000506003600260c052602060c02060c052602060c0205460e05260c052604060c020541515610742576003600260c052602060c02060c052602060c0205460e05260c052604060c0208054600054825401101561073857600080fd5b6000548154018155505b5b600880546001825401101561075757600080fd5b60018154018155505b600460085414156107e957600160043360e05260c052604060c020541415610787576107e3565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f16107bf57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b005b63332d2b87600051141561081257341561080457600080fd5b60015460005260206000f350005b63abeb7efe600051141561085957341561082b57600080fd5b600435602051811061083c57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b63d7f598bc60005114156108a057341561087257600080fd5b600435602051811061088357600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dfbf53ae60005114156109725734156108b957600080fd5b60058060c052602060c020610180602082540161012060006002818352015b826101205160200211156108eb5761090d565b61012051850154610120516020028501525b81516001018083528114156108d8575b5050505050506101e0610180516020818352015b60206101e05111156109325761094e565b60006101e0516101a001535b8151600101808352811415610921575b50506020610160526040610180510160206001820306601f8201039050610160f350005b6347697f59600051141561099957341561098b57600080fd5b60085460005260206000f350005b63f9043b6160005114156109c05734156109b257600080fd5b60095460005260206000f350005b60006000fd5b6100e0610aa6036100e06000396100e0610aa6036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b600015610144575b610180526101405261016052600054610160511060026001541015171561013457600060006000600061016051610140516000f161012657600080fd5b600060005260005161018051565b6001600052600051610180515650005b600015610196575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417600052600051610160515650005b631aa3a0086000511415610315576101405163619ea80661018052336101a0526101a0516006580161014c565b6102005261014052610200516101405261014051156101f757600060006000600034336000f16101f257600080fd5b610313565b6101405161016051610180516101a0516101c0516101e05161020051635d0e94b261024052336102605234610280526102805161026051600658016100e9565b6102e052610200526101e0526101c0526101a0526101805261016052610140526102e051610140526101405161026c57600080fd5b33600261027857600080fd5b6002600154066002811061028b57600080fd5b600260c052602060c0200160c052602060c0205560018054600182540110156102b357600080fd5b60018154018155506000543411156103125760033360e05260c052604060c02080546000543410156102e457600080fd5b600054340382540110156102f757600080fd5b60005434101561030657600080fd5b60005434038154018155505b5b005b639d77dfb1600051141561036057341561032e57600080fd5b6004356002811061033e57600080fd5b506008541561034c57600080fd5b60043560043360e05260c052604060c02055005b600015610419575b61018052610140526101605261016051600561038357600080fd5b60056101405160016101405101101561039b57600080fd5b600161014051010614156103bd57610160516000526000516101805156610417565b6101605160056103cc57600080fd5b6005610140516002610140510110156103e457600080fd5b6002610140510106141561040657610160516000526000516101805156610416565b6101405160005260005161018051565b5b005b600015610658575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c05160065801610368565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610534576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561050757610529565b61012051602002850151610120518501555b81516001018083528114156104f4575b505050505050610652565b6006546101605114156105cb5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b8261012051602002111561059e576105c0565b61012051602002850151610120518501555b815160010180835281141561058b575b505050505050610651565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b826101205160200211156106285761064a565b61012051602002850151610120518501555b8151600101808352811415610615575b5050505050505b5b61014051565b636898f82b60005114156107eb57341561067157600080fd5b6009546008541015610760576000600435101561068d57600080fd5b6004600435111561069d57600080fd5b6004356002600260c052602060c02060c052602060c0200155600160043360e05260c052604060c0205414156106d257610743565b60065801610421565b6000506003600260c052602060c02060c052602060c0205460e05260c052604060c020541515610742576003600260c052602060c02060c052602060c0205460e05260c052604060c0208054600054825401101561073857600080fd5b6000548154018155505b5b600880546001825401101561075757600080fd5b60018154018155505b600460085414156107e957600160043360e05260c052604060c020541415610787576107e3565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f16107bf57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b005b63332d2b87600051141561081257341561080457600080fd5b60015460005260206000f350005b63abeb7efe600051141561085957341561082b57600080fd5b600435602051811061083c57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b63d7f598bc60005114156108a057341561087257600080fd5b600435602051811061088357600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dfbf53ae60005114156109725734156108b957600080fd5b60058060c052602060c020610180602082540161012060006002818352015b826101205160200211156108eb5761090d565b61012051850154610120516020028501525b81516001018083528114156108d8575b5050505050506101e0610180516020818352015b60206101e05111156109325761094e565b60006101e0516101a001535b8151600101808352811415610921575b50506020610160526040610180510160206001820306601f8201039050610160f350005b6347697f59600051141561099957341561098b57600080fd5b60085460005260206000f350005b63f9043b6160005114156109c05734156109b257600080fd5b60095460005260206000f350005b60006000fd",
  "source": "# Authors : \n# Hitesh Kaushik : 2018201057\n# Ankit Pant : 2018201035\n\n######################\n# Game Structure\n# 0 : Rock\n# 1 : Spock\n# 2 : Paper\n# 3 : Lizard\n# 4 : Scissor \n######################\n\n\nstruct Player:\n    playerAddr: address\n    playerHash: bytes32\n    playerChoice: uint256\n    playerNo: uint256\n    \n    \ngameFee: wei_value\nnum_players: public(uint256)\nparticipants: Player[2]\nplayerPayout: public(map(address, wei_value))\nopponent: public(map(address,bool))\nwinner: public(string[10])\nagent_choice: uint256\nowner_address: address\ngame_counts: public(uint256)\niter_counts: public(uint256)\n\n@public\ndef __init__(bid: wei_value, addr: address):\n    self.gameFee = bid\n    self.num_players = 0\n    self.owner_address = addr\n    self.game_counts = 0\n    self.iter_counts = 10\n\n@public\n@constant\ndef get_owner_addr() -> address:\n    return self.owner_address\n\n@public\n@constant\ndef get_fee() -> wei_value:\n    return self.gameFee\n\n# @payable\n@private\ndef check_validity(addr: address, fee: wei_value) -> bool:\n    if(self.num_players >= 2 or fee < self.gameFee):\n        send(addr, fee)\n        return False\n    return True\n\n@private    \ndef is_registered(addr: address) -> bool:\n    return (addr == self.participants[0].playerAddr or addr == self.participants[1].playerAddr)\n    \n@public\n@payable\ndef register():\n    is_valid: bool = self.is_registered(msg.sender)\n    if is_valid:\n        send(msg.sender, msg.value)\n    else:\n        is_valid = self.check_validity(msg.sender, msg.value)\n        assert is_valid\n        self.participants[self.num_players % 2].playerAddr = msg.sender\n        self.num_players += 1\n        if msg.value > self.gameFee:\n            self.playerPayout[msg.sender] += msg.value - self.gameFee\n        \n@public\ndef human_opponent(oppn: bool):\n    assert self.game_counts == 0\n    self.opponent[msg.sender] = oppn\n    \n@private \ndef check_winner(pl1: uint256, pl2: uint256) -> uint256:\n    if (pl1+1)%5 == pl2:\n        return pl2\n    elif (pl1+2)%5== pl2:\n        return pl2\n    else:\n        return pl1\n    \n@private\ndef play_with_agent():\n    self.agent_choice = 4\n    win: uint256\n    win = self.check_winner(self.participants[0].playerChoice,self.agent_choice)\n    if win == self.participants[0].playerChoice and win == self.agent_choice:\n        self.winner = \"Draw\"\n    elif win== self.agent_choice:\n        self.winner = \"Agent\"\n    else:\n        self.winner = \"Player 1\"\n    \n\n@public \ndef play(ch: uint256):\n    if self.game_counts < self.iter_counts:\n        assert(ch >= 0)\n        assert(ch <= 4)\n        self.participants[0].playerChoice = ch\n        if(self.opponent[msg.sender]== True):\n            pass\n            # play_with_human()\n        else:\n            self.play_with_agent()\n            if self.playerPayout[self.participants[0].playerAddr] == 0:\n                self.playerPayout[self.participants[0].playerAddr] += self.gameFee\n        self.game_counts += 1\n    if self.game_counts == 4:\n        if(self.opponent[msg.sender]== True):\n            pass\n            # play_with_human()\n        else:\n            send(self.owner_address, self.playerPayout[self.participants[0].playerAddr])\n            self.playerPayout[self.participants[0].playerAddr] = 0\n        self.game_counts = 0",
  "sourcePath": "/home/maven/Sem_III/Blockchains/Assignments/Assignment_1/spsls_smart_contract/SPSLS_truffle/contracts/SPSLS.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.a01cdc8"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-15T13:35:40.555Z"
}