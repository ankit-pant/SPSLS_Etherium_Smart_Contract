{
  "contractName": "SPSLS",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "bid"
        },
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "constructor"
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "get_owner_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 513
    },
    {
      "name": "get_fee",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 543
    },
    {
      "name": "get_payable_amount",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 727
    },
    {
      "name": "check_registrations",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 1947
    },
    {
      "name": "register",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 146588
    },
    {
      "name": "human_opponent",
      "outputs": [],
      "inputs": [
        {
          "type": "bool",
          "name": "oppn"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 35925
    },
    {
      "name": "play",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "ch"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 297184
    },
    {
      "name": "num_players",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 843
    },
    {
      "name": "opponent",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1027
    },
    {
      "name": "winner",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6664
    },
    {
      "name": "game_counts",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 933
    },
    {
      "name": "iter_counts",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 963
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526040610bb26101403934156100a157600080fd5b60206020610bb20160c03960c05160205181106100bd57600080fd5b50610140516000556000600155610160516007556000600855600a600955610b9a56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b634a92e6fa60005114156101285734156100fa57600080fd5b600435602051811061010b57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b60001561018a575b6101805261014052610160526000546101605110600160015411171561017a57600060006000600061016051610140516000f161016c57600080fd5b600060005260005161018051565b6001600052600051610180515650005b6000156101f5575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417156101e557600160005260005161016051566101f3565b600060005260005161016051565b005b63341ae5f1600051141561027957341561020e57600080fd5b600435602051811061021f57600080fd5b506101405163619ea806610180526004356101a0526101a05160065801610192565b61020052610140526102005161014052600161014051141561026c57600160005260206000f3610277565b600060005260206000f35b005b631aa3a0086000511415610455576101405163619ea80661018052336101a0526101a05160065801610192565b6102005261014052610200516101405260016101405114156102e757600060006000600034336000f16102d857600080fd5b600060005260206000f3610453565b6101405161016051610180516101a0516101c0516101e0516102005161022051635d0e94b2610260523361028052346102a0526102a0516102805160065801610130565b6103005261022052610200526101e0526101c0526101a052610180526101605261014052610300516102205260016102205114156104475760015415156103a15733600260c052602060c02060c052602060c02055600180546001825401101561039457600080fd5b60018154018155506103e1565b600160015414156103e057336001600260c052602060c0200160c052602060c0205560018054600182540110156103d757600080fd5b60018154018155505b5b6000543411156104385760033360e05260c052604060c020805460005434101561040a57600080fd5b6000543403825401101561041d57600080fd5b60005434101561042c57600080fd5b60005434038154018155505b600160005260206000f3610452565b600060005260206000f35b5b005b639d77dfb160005114156104a057341561046e57600080fd5b6004356002811061047e57600080fd5b506008541561048c57600080fd5b60043560043360e05260c052604060c02055005b600015610559575b6101805261014052610160526101605160056104c357600080fd5b6005610140516001610140510110156104db57600080fd5b600161014051010614156104fd57610160516000526000516101805156610557565b61016051600561050c57600080fd5b60056101405160026101405101101561052457600080fd5b6002610140510106141561054657610160516000526000516101805156610556565b6101405160005260005161018051565b5b005b600015610798575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c051600658016104a8565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610674576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561064757610669565b61012051602002850151610120518501555b8151600101808352811415610634575b505050505050610792565b60065461016051141561070b5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b826101205160200211156106de57610700565b61012051602002850151610120518501555b81516001018083528114156106cb575b505050505050610791565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b826101205160200211156107685761078a565b61012051602002850151610120518501555b8151600101808352811415610755575b5050505050505b5b61014051565b636898f82b600051141561092b5734156107b157600080fd5b60095460085410156108a057600060043510156107cd57600080fd5b600460043511156107dd57600080fd5b6004356002600260c052602060c02060c052602060c0200155600160043360e05260c052604060c02054141561081257610883565b60065801610561565b6000506003600260c052602060c02060c052602060c0205460e05260c052604060c020541515610882576003600260c052602060c02060c052602060c0205460e05260c052604060c0208054600054825401101561087857600080fd5b6000548154018155505b5b600880546001825401101561089757600080fd5b60018154018155505b6004600854141561092957600160043360e05260c052604060c0205414156108c757610923565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f16108ff57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b005b63332d2b87600051141561095257341561094457600080fd5b60015460005260206000f350005b63d7f598bc600051141561099957341561096b57600080fd5b600435602051811061097c57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dfbf53ae6000511415610a6b5734156109b257600080fd5b60058060c052602060c020610180602082540161012060006002818352015b826101205160200211156109e457610a06565b61012051850154610120516020028501525b81516001018083528114156109d1575b5050505050506101e0610180516020818352015b60206101e0511115610a2b57610a47565b60006101e0516101a001535b8151600101808352811415610a1a575b50506020610160526040610180510160206001820306601f8201039050610160f350005b6347697f596000511415610a92573415610a8457600080fd5b60085460005260206000f350005b63f9043b616000511415610ab9573415610aab57600080fd5b60095460005260206000f350005b5b6100e0610b9a036100e06000396100e0610b9a036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b634a92e6fa60005114156101285734156100fa57600080fd5b600435602051811061010b57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b60001561018a575b6101805261014052610160526000546101605110600160015411171561017a57600060006000600061016051610140516000f161016c57600080fd5b600060005260005161018051565b6001600052600051610180515650005b6000156101f5575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417156101e557600160005260005161016051566101f3565b600060005260005161016051565b005b63341ae5f1600051141561027957341561020e57600080fd5b600435602051811061021f57600080fd5b506101405163619ea806610180526004356101a0526101a05160065801610192565b61020052610140526102005161014052600161014051141561026c57600160005260206000f3610277565b600060005260206000f35b005b631aa3a0086000511415610455576101405163619ea80661018052336101a0526101a05160065801610192565b6102005261014052610200516101405260016101405114156102e757600060006000600034336000f16102d857600080fd5b600060005260206000f3610453565b6101405161016051610180516101a0516101c0516101e0516102005161022051635d0e94b2610260523361028052346102a0526102a0516102805160065801610130565b6103005261022052610200526101e0526101c0526101a052610180526101605261014052610300516102205260016102205114156104475760015415156103a15733600260c052602060c02060c052602060c02055600180546001825401101561039457600080fd5b60018154018155506103e1565b600160015414156103e057336001600260c052602060c0200160c052602060c0205560018054600182540110156103d757600080fd5b60018154018155505b5b6000543411156104385760033360e05260c052604060c020805460005434101561040a57600080fd5b6000543403825401101561041d57600080fd5b60005434101561042c57600080fd5b60005434038154018155505b600160005260206000f3610452565b600060005260206000f35b5b005b639d77dfb160005114156104a057341561046e57600080fd5b6004356002811061047e57600080fd5b506008541561048c57600080fd5b60043560043360e05260c052604060c02055005b600015610559575b6101805261014052610160526101605160056104c357600080fd5b6005610140516001610140510110156104db57600080fd5b600161014051010614156104fd57610160516000526000516101805156610557565b61016051600561050c57600080fd5b60056101405160026101405101101561052457600080fd5b6002610140510106141561054657610160516000526000516101805156610556565b6101405160005260005161018051565b5b005b600015610798575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c051600658016104a8565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610674576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561064757610669565b61012051602002850151610120518501555b8151600101808352811415610634575b505050505050610792565b60065461016051141561070b5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b826101205160200211156106de57610700565b61012051602002850151610120518501555b81516001018083528114156106cb575b505050505050610791565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b826101205160200211156107685761078a565b61012051602002850151610120518501555b8151600101808352811415610755575b5050505050505b5b61014051565b636898f82b600051141561092b5734156107b157600080fd5b60095460085410156108a057600060043510156107cd57600080fd5b600460043511156107dd57600080fd5b6004356002600260c052602060c02060c052602060c0200155600160043360e05260c052604060c02054141561081257610883565b60065801610561565b6000506003600260c052602060c02060c052602060c0205460e05260c052604060c020541515610882576003600260c052602060c02060c052602060c0205460e05260c052604060c0208054600054825401101561087857600080fd5b6000548154018155505b5b600880546001825401101561089757600080fd5b60018154018155505b6004600854141561092957600160043360e05260c052604060c0205414156108c757610923565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f16108ff57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b005b63332d2b87600051141561095257341561094457600080fd5b60015460005260206000f350005b63d7f598bc600051141561099957341561096b57600080fd5b600435602051811061097c57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dfbf53ae6000511415610a6b5734156109b257600080fd5b60058060c052602060c020610180602082540161012060006002818352015b826101205160200211156109e457610a06565b61012051850154610120516020028501525b81516001018083528114156109d1575b5050505050506101e0610180516020818352015b60206101e0511115610a2b57610a47565b60006101e0516101a001535b8151600101808352811415610a1a575b50506020610160526040610180510160206001820306601f8201039050610160f350005b6347697f596000511415610a92573415610a8457600080fd5b60085460005260206000f350005b63f9043b616000511415610ab9573415610aab57600080fd5b60095460005260206000f350005b",
  "source": "# Authors : \n# Hitesh Kaushik : 2018201057\n# Ankit Pant : 2018201035\n\n######################\n# Game Structure\n# 0 : Rock\n# 1 : Spock\n# 2 : Paper\n# 3 : Lizard\n# 4 : Scissor \n######################\n\n\nstruct Player:\n    playerAddr: address\n    playerHash: bytes32\n    playerChoice: uint256\n    playerNo: uint256\n    \n    \ngameFee: wei_value\nnum_players: public(uint256)\nparticipants: Player[2]\nplayerPayout: map(address, wei_value)\nopponent: public(map(address,bool))\nwinner: public(string[10])\nagent_choice: uint256\nowner_address: address\ngame_counts: public(uint256)\niter_counts: public(uint256)\n\n@public\ndef __init__(bid: wei_value, addr: address):\n    self.gameFee = bid\n    self.num_players = 0\n    self.owner_address = addr\n    self.game_counts = 0\n    self.iter_counts = 10\n\n@public\n@payable\ndef __default__():\n    pass\n\n\n@public\n@constant\ndef get_owner_addr() -> address:\n    return self.owner_address\n\n@public\n@constant\ndef get_fee() -> wei_value:\n    return self.gameFee\n    \n@public\n@constant\ndef get_payable_amount(addr: address) -> wei_value:\n    return self.playerPayout[addr]\n\n\n@private\ndef check_validity(addr: address, fee: wei_value) -> bool:\n    if(self.num_players > 1 or fee < self.gameFee):\n        send(addr, fee)\n        return False\n    return True\n\n@private    \ndef is_registered(addr: address) -> bool:\n    if (addr == self.participants[0].playerAddr or addr == self.participants[1].playerAddr) :\n        return True\n    else:\n        return False\n\n@public\ndef check_registrations(addr: address) -> bool:\n    reg : bool = self.is_registered(addr)\n    if reg==True:\n        return True\n    else:\n        return False\n\n@public\n@payable\ndef register() -> bool:\n    is_invalid: bool = self.is_registered(msg.sender)\n    if is_invalid == True:\n        send(msg.sender, msg.value)\n        return False\n    else:\n        is_valid: bool = self.check_validity(msg.sender, msg.value)\n        if is_valid == True:\n            if self.num_players == 0:\n                self.participants[0].playerAddr = msg.sender\n                self.num_players += 1\n            elif self.num_players == 1:\n                self.participants[1].playerAddr = msg.sender\n                self.num_players += 1\n            if msg.value > self.gameFee:\n                self.playerPayout[msg.sender] += msg.value - self.gameFee\n            return True\n        else:\n            return False\n        \n@public\ndef human_opponent(oppn: bool):\n    assert self.game_counts == 0\n    self.opponent[msg.sender] = oppn\n    \n@private \ndef check_winner(pl1: uint256, pl2: uint256) -> uint256:\n    if (pl1+1)%5 == pl2:\n        return pl2\n    elif (pl1+2)%5== pl2:\n        return pl2\n    else:\n        return pl1\n    \n@private\ndef play_with_agent():\n    self.agent_choice = 4\n    win: uint256\n    win = self.check_winner(self.participants[0].playerChoice,self.agent_choice)\n    if win == self.participants[0].playerChoice and win == self.agent_choice:\n        self.winner = \"Draw\"\n    elif win== self.agent_choice:\n        self.winner = \"Agent\"\n    else:\n        self.winner = \"Player 1\"\n    \n\n@public \ndef play(ch: uint256):\n    if self.game_counts < self.iter_counts:\n        assert(ch >= 0)\n        assert(ch <= 4)\n        self.participants[0].playerChoice = ch\n        if(self.opponent[msg.sender]== True):\n            pass\n            # play_with_human()\n        else:\n            self.play_with_agent()\n            if self.playerPayout[self.participants[0].playerAddr] == 0:\n                self.playerPayout[self.participants[0].playerAddr] += self.gameFee\n        self.game_counts += 1\n    if self.game_counts == 4:\n        if(self.opponent[msg.sender]== True):\n            pass\n            # play_with_human()\n        else:\n            send(self.owner_address, self.playerPayout[self.participants[0].playerAddr])\n            self.playerPayout[self.participants[0].playerAddr] = 0\n        self.game_counts = 0",
  "sourcePath": "/home/maven/Sem_III/Blockchains/Assignments/Assignment_1/spsls_smart_contract/SPSLS_truffle/contracts/SPSLS.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.a01cdc8"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x7b969b9190AD4eFdF9e34Cf07c643a91b1eaA9cA",
      "transactionHash": "0xcf6970304d33b534f5503e9bbd9e313089607c718923c943b5848fdeffe788bc"
    }
  },
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-15T22:21:23.229Z"
}