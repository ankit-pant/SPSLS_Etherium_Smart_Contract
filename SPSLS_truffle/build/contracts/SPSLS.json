{
  "contractName": "SPSLS",
  "abi": [
    {
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "bid"
        },
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "constructor"
    },
    {
      "name": "get_owner_addr",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 513
    },
    {
      "name": "get_fee",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 543
    },
    {
      "name": "get_payable_amount",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 727
    },
    {
      "name": "get_number_players",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 603
    },
    {
      "name": "get_game_count",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 633
    },
    {
      "name": "check_registrations",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 1996
    },
    {
      "name": "register",
      "outputs": [],
      "inputs": [],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 146402
    },
    {
      "name": "select_human_opponent",
      "outputs": [],
      "inputs": [
        {
          "type": "bool",
          "name": "oppn"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 37357
    },
    {
      "name": "check_opponent",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "addr"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 967
    },
    {
      "name": "reveal",
      "outputs": [],
      "inputs": [
        {
          "type": "uint256",
          "name": "ch"
        },
        {
          "type": "uint256",
          "name": "nonce"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 6370
    },
    {
      "name": "play",
      "outputs": [],
      "inputs": [
        {
          "type": "bytes32",
          "name": "choiceHash"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 151180
    }
  ],
  "bytecode": "0x740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526040610de56101403934156100a157600080fd5b60206020610de50160c03960c05160205181106100bd57600080fd5b506101405160005560006001556101605160075560006008556005600955610dcd56600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b634a92e6fa60005114156101285734156100fa57600080fd5b600435602051811061010b57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b637bceb538600051141561014f57341561014157600080fd5b60015460005260206000f350005b63428889b2600051141561017657341561016857600080fd5b60085460005260206000f350005b6000156101d9575b61018052610140526101605260005461016051106002600154101517156101c957600060006000600061016051610140516000f16101bb57600080fd5b600060005260005161018051565b6001600052600051610180515650005b60001561022b575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417600052600051610160515650005b63341ae5f160005114156102af57341561024457600080fd5b600435602051811061025557600080fd5b506101405163619ea806610180526004356101a0526101a051600658016101e1565b6102005261014052610200516101405260016101405114156102a257600160005260206000f36102ad565b600060005260206000f35b005b631aa3a00860005114156103eb5763619ea80661024052336102605261026051600658016101e1565b6102c0526102c0511561030057600060006000600034336000f16102fb57600080fd5b6103e9565b61014051635d0e94b261018052336101a052346101c0526101c0516101a0516006580161017e565b6102205261014052610220516101405261014051156103e85733600261034d57600080fd5b6002600154066002811061036057600080fd5b600260c052602060c0200160c052602060c02055600180546001825401101561038857600080fd5b60018154018155506000543411156103e75760033360e05260c052604060c02080546000543410156103b957600080fd5b600054340382540110156103cc57600080fd5b6000543410156103db57600080fd5b60005434038154018155505b5b5b005b6346218d31600051141561045c57341561040457600080fd5b6004356002811061041457600080fd5b5063619ea80661014052336101605261016051600658016101e1565b6101c0526101c0511561045a5760085415156104595760043560043360e05260c052604060c020555b5b005b6308befc1e60005114156104a357341561047557600080fd5b600435602051811061048657600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b60001561055c575b6101805261014052610160526101605160056104c657600080fd5b6005610140516001610140510110156104de57600080fd5b600161014051010614156105005761016051600052600051610180515661055a565b61016051600561050f57600080fd5b60056101405160026101405101101561052757600080fd5b6002610140510106141561054957610160516000526000516101805156610559565b6101405160005260005161018051565b5b005b60001561079b575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c051600658016104ab565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610677576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561064a5761066c565b61012051602002850151610120518501555b8151600101808352811415610637575b505050505050610795565b60065461016051141561070e5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b826101205160200211156106e157610703565b61012051602002850151610120518501555b81516001018083528114156106ce575b505050505050610794565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b8261012051602002111561076b5761078d565b61012051602002850151610120518501555b8151600101808352811415610758575b5050505050505b5b61014051565b6000156107ca575b61016052610140526004610140511115600061014051101516600052600051610160515650005b639348cef76000511415610b885734156107e357600080fd5b6308c379a06101e0526020610200526024610220527f596f7520617265206e6f74205265676973746572656420666f72207468697320610240527f67616d6500000000000000000000000000000000000000000000000000000000610260526102205063619ea80661014052336101605261016051600658016101e1565b6101c0526101c0516108745760a46101fcfd5b6308c379a061036052602061038052601c6103a0527f456e7465722063686f696365206265747765656e203020616e642034000000006103c0526103a0506101406102a0525b6102a0515160206102a051016102a0526102a06102a05110156108dc576108ba565b637029313d6102c0526004356102e0526102e051600658016107a3565b610340526102806102a0525b6102a0515260206102a051036102a0526101406102a05110151561092857610905565b6103405161093757608461037cfd5b60043360e05260c052604060c0205415610b85576308c379a061040052602061042052601b610440527f4f70706f6e656e74206e6f742072656769737465726564207965740000000000610460526104405060026001541461099a57608461041cfd5b6001600260c052602060c02060c052602060c02001546104a05260016001600260c052602060c0200160c052602060c02001546104c0526308c379a06104e0526020610500526022610520527f4f70706f6e656e74277320636f6d6d69746d656e74206e6f74206d6164652079610540527f6574000000000000000000000000000000000000000000000000000000000000610560526105205060006104a05118610a465760a46104fcfd5b6308c379a06105a05260206105c05260226105e0527f4f70706f6e656e74277320636f6d6d69746d656e74206e6f74206d6164652079610600527f6574000000000000000000000000000000000000000000000000000000000000610620526105e05060006104c05118610abb5760a46105bcfd5b60243560c052602060c02060043560c052602060c0201860c052602060c02061066052600260c052602060c02060c052602060c02054331415610b0357600061068052610b0a565b6001610680525b6308c379a06106a05260206106c052600d6106e0527f48617368204d69736d6174636800000000000000000000000000000000000000610700526106e05060016106805160028110610b5b57600080fd5b600260c052602060c0200160c052602060c02001546106605114610b805760846106bcfd5b610b86565b5b005b63c7a1865b6000511415610ce7573415610ba157600080fd5b63619ea80661014052336101605261016051600658016101e1565b6101c0526101c05115610ce5576009546008541015610c4757600260c052602060c02060c052602060c02054331415610c0d576004356001600260c052602060c02060c052602060c0200155610c2a565b60043560016001600260c052602060c0200160c052602060c02001555b6008805460018254011015610c3e57600080fd5b60018154018155505b60016009541015610c5757600080fd5b6001600954036008541415610ce457600160043360e05260c052604060c020541415610c8257610cde565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f1610cba57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b5b005b60006000fd5b6100e0610dcd036100e06000396100e0610dcd036000f3",
  "deployedBytecode": "0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a05263e92e85d960005114156100ba5734156100ac57600080fd5b60075460005260206000f350005b6364af47cf60005114156100e15734156100d357600080fd5b60005460005260206000f350005b634a92e6fa60005114156101285734156100fa57600080fd5b600435602051811061010b57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b637bceb538600051141561014f57341561014157600080fd5b60015460005260206000f350005b63428889b2600051141561017657341561016857600080fd5b60085460005260206000f350005b6000156101d9575b61018052610140526101605260005461016051106002600154101517156101c957600060006000600061016051610140516000f16101bb57600080fd5b600060005260005161018051565b6001600052600051610180515650005b60001561022b575b61016052610140526001600260c052602060c0200160c052602060c020546101405114600260c052602060c02060c052602060c02054610140511417600052600051610160515650005b63341ae5f160005114156102af57341561024457600080fd5b600435602051811061025557600080fd5b506101405163619ea806610180526004356101a0526101a051600658016101e1565b6102005261014052610200516101405260016101405114156102a257600160005260206000f36102ad565b600060005260206000f35b005b631aa3a00860005114156103eb5763619ea80661024052336102605261026051600658016101e1565b6102c0526102c0511561030057600060006000600034336000f16102fb57600080fd5b6103e9565b61014051635d0e94b261018052336101a052346101c0526101c0516101a0516006580161017e565b6102205261014052610220516101405261014051156103e85733600261034d57600080fd5b6002600154066002811061036057600080fd5b600260c052602060c0200160c052602060c02055600180546001825401101561038857600080fd5b60018154018155506000543411156103e75760033360e05260c052604060c02080546000543410156103b957600080fd5b600054340382540110156103cc57600080fd5b6000543410156103db57600080fd5b60005434038154018155505b5b5b005b6346218d31600051141561045c57341561040457600080fd5b6004356002811061041457600080fd5b5063619ea80661014052336101605261016051600658016101e1565b6101c0526101c0511561045a5760085415156104595760043560043360e05260c052604060c020555b5b005b6308befc1e60005114156104a357341561047557600080fd5b600435602051811061048657600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b60001561055c575b6101805261014052610160526101605160056104c657600080fd5b6005610140516001610140510110156104de57600080fd5b600161014051010614156105005761016051600052600051610180515661055a565b61016051600561050f57600080fd5b60056101405160026101405101101561052757600080fd5b6002610140510106141561054957610160516000526000516101805156610559565b6101405160005260005161018051565b5b005b60001561079b575b610140526004600655610140516101605163ee76be976101a0526002600260c052602060c02060c052602060c02001546101c0526006546101e0526101e0516101c051600658016104ab565b610240526101605261014052610240516101605260065461016051146002600260c052602060c02060c052602060c020015461016051141615610677576004610320527f44726177000000000000000000000000000000000000000000000000000000006103405261032080600560c052602060c020602082510161012060006002818352015b8261012051602002111561064a5761066c565b61012051602002850151610120518501555b8151600101808352811415610637575b505050505050610795565b60065461016051141561070e5760056102c0527f4167656e740000000000000000000000000000000000000000000000000000006102e0526102c080600560c052602060c020602082510161012060006002818352015b826101205160200211156106e157610703565b61012051602002850151610120518501555b81516001018083528114156106ce575b505050505050610794565b6008610260527f506c6179657220310000000000000000000000000000000000000000000000006102805261026080600560c052602060c020602082510161012060006002818352015b8261012051602002111561076b5761078d565b61012051602002850151610120518501555b8151600101808352811415610758575b5050505050505b5b61014051565b6000156107ca575b61016052610140526004610140511115600061014051101516600052600051610160515650005b639348cef76000511415610b885734156107e357600080fd5b6308c379a06101e0526020610200526024610220527f596f7520617265206e6f74205265676973746572656420666f72207468697320610240527f67616d6500000000000000000000000000000000000000000000000000000000610260526102205063619ea80661014052336101605261016051600658016101e1565b6101c0526101c0516108745760a46101fcfd5b6308c379a061036052602061038052601c6103a0527f456e7465722063686f696365206265747765656e203020616e642034000000006103c0526103a0506101406102a0525b6102a0515160206102a051016102a0526102a06102a05110156108dc576108ba565b637029313d6102c0526004356102e0526102e051600658016107a3565b610340526102806102a0525b6102a0515260206102a051036102a0526101406102a05110151561092857610905565b6103405161093757608461037cfd5b60043360e05260c052604060c0205415610b85576308c379a061040052602061042052601b610440527f4f70706f6e656e74206e6f742072656769737465726564207965740000000000610460526104405060026001541461099a57608461041cfd5b6001600260c052602060c02060c052602060c02001546104a05260016001600260c052602060c0200160c052602060c02001546104c0526308c379a06104e0526020610500526022610520527f4f70706f6e656e74277320636f6d6d69746d656e74206e6f74206d6164652079610540527f6574000000000000000000000000000000000000000000000000000000000000610560526105205060006104a05118610a465760a46104fcfd5b6308c379a06105a05260206105c05260226105e0527f4f70706f6e656e74277320636f6d6d69746d656e74206e6f74206d6164652079610600527f6574000000000000000000000000000000000000000000000000000000000000610620526105e05060006104c05118610abb5760a46105bcfd5b60243560c052602060c02060043560c052602060c0201860c052602060c02061066052600260c052602060c02060c052602060c02054331415610b0357600061068052610b0a565b6001610680525b6308c379a06106a05260206106c052600d6106e0527f48617368204d69736d6174636800000000000000000000000000000000000000610700526106e05060016106805160028110610b5b57600080fd5b600260c052602060c0200160c052602060c02001546106605114610b805760846106bcfd5b610b86565b5b005b63c7a1865b6000511415610ce7573415610ba157600080fd5b63619ea80661014052336101605261016051600658016101e1565b6101c0526101c05115610ce5576009546008541015610c4757600260c052602060c02060c052602060c02054331415610c0d576004356001600260c052602060c02060c052602060c0200155610c2a565b60043560016001600260c052602060c0200160c052602060c02001555b6008805460018254011015610c3e57600080fd5b60018154018155505b60016009541015610c5757600080fd5b6001600954036008541415610ce457600160043360e05260c052604060c020541415610c8257610cde565b60006000600060006003600260c052602060c02060c052602060c0205460e05260c052604060c020546007546000f1610cba57600080fd5b60006003600260c052602060c02060c052602060c0205460e05260c052604060c020555b60006008555b5b005b60006000fd",
  "source": "# Authors : \n# Hitesh Kaushik : 2018201057\n# Ankit Pant : 2018201035\n\n######################\n# Game Structure\n# 0 : Rock\n# 1 : Spock\n# 2 : Paper\n# 3 : Lizard\n# 4 : Scissor \n######################\n\n\nstruct Player:\n    playerAddr: address\n    playerHash: bytes32\n    playerChoice: uint256\n    playerNo: uint256\n    \n    \ngameFee: wei_value\nnum_players: uint256\nparticipants: Player[2]\nplayerPayout: map(address, wei_value)\nopponent: map(address,bool)\nwinner: string[10]\nagent_choice: uint256\nowner_address: address\ngame_counts: uint256\niter_counts: uint256\ntempHash: bytes32 # delete it post testing\n\n@public\ndef __init__(bid: wei_value, addr: address):\n    self.gameFee = bid\n    self.num_players = 0\n    self.owner_address = addr\n    self.game_counts = 0\n    self.iter_counts = 5\n\n@public\n@constant\ndef get_owner_addr() -> address:\n    return self.owner_address\n\n@public\n@constant\ndef get_fee() -> wei_value:\n    return self.gameFee\n\n@public\n@constant\ndef get_payable_amount(addr: address) -> wei_value:\n    return self.playerPayout[addr]\n\n@public\n@constant\ndef get_number_players() -> uint256:\n    return self.num_players\n\n@public\n@constant\ndef get_game_count() -> uint256:\n    return self.game_counts\n\n\n\n# @payable\n@private\ndef check_validity(addr: address, fee: wei_value) -> bool:\n    if(self.num_players >= 2 or fee < self.gameFee):\n        send(addr, fee)\n        return False\n    return True\n\n@constant\n@private    \ndef is_registered(addr: address) -> bool:\n    return (addr == self.participants[0].playerAddr or addr == self.participants[1].playerAddr)\n    \n@public\ndef check_registrations(addr: address) -> bool:\n    reg : bool = self.is_registered(addr)\n    if reg==True:\n        return True\n    else:\n        return False\n\n@public\n@payable\ndef register():\n    if self.is_registered(msg.sender):\n        send(msg.sender, msg.value)\n    else:\n        is_valid: bool = self.check_validity(msg.sender, msg.value)\n        if is_valid:\n            # assert is_valid, \"Insufficient Fee Paid or Game is already Full\"\n            self.participants[self.num_players % 2].playerAddr = msg.sender\n            self.num_players += 1\n            if msg.value > self.gameFee:\n                self.playerPayout[msg.sender] += msg.value - self.gameFee\n        \n@public\ndef select_human_opponent(oppn: bool):\n    if self.is_registered(msg.sender):\n        if self.game_counts == 0:\n            self.opponent[msg.sender] = oppn\n\n@public\n@constant\ndef check_opponent(addr: address)->bool:\n    return self.opponent[addr]\n    \n@private \ndef check_winner(pl1: uint256, pl2: uint256) -> uint256:\n    if (pl1+1)%5 == pl2:\n        return pl2\n    elif (pl1+2)%5== pl2:\n        return pl2\n    else:\n        return pl1\n\n@private\ndef play_with_agent():\n    self.agent_choice = 4\n    win: uint256\n    win = self.check_winner(self.participants[0].playerChoice,self.agent_choice)\n    if win == self.participants[0].playerChoice and win == self.agent_choice:\n        self.winner = \"Draw\"\n    elif win== self.agent_choice:\n        self.winner = \"Agent\"\n    else:\n        self.winner = \"Player 1\"\n\n@constant\n@private\ndef valid_choice(ch: uint256) -> bool:\n    return (ch >= 0 and ch <= 4)    \n    \n@public\ndef reveal(ch: uint256, nonce: uint256):\n    assert self.is_registered(msg.sender), \"You are not Registered for this game\"\n    assert self.valid_choice(ch), \"Enter choice between 0 and 4\"\n    if self.opponent[msg.sender]:\n        assert self.num_players == 2, \"Opponent not registered yet\"\n        hash_0: uint256 = convert(self.participants[0].playerHash, uint256)\n        hash_1: uint256 = convert(self.participants[1].playerHash, uint256)\n        assert hash_0 != 0, \"Opponent's commitment not made yet\"\n        assert hash_1 != 0, \"Opponent's commitment not made yet\"\n        newHash: bytes32 = keccak256(convert(bitwise_xor(convert(keccak256(convert(ch, bytes32)), uint256), convert(keccak256(convert(nonce, bytes32)), uint256)), bytes32))\n        playerId: uint256\n        if(msg.sender == self.participants[0].playerAddr):\n            playerId = 0\n        else:\n            playerId = 1\n        assert newHash == self.participants[playerId].playerHash, \"Hash Mismatch\"\n        \n    else:\n        pass\n    \n@public \ndef play(choiceHash: bytes32):\n    if self.is_registered(msg.sender):\n        if self.game_counts < self.iter_counts:\n            if msg.sender == self.participants[0].playerAddr:\n                self.participants[0].playerHash = choiceHash\n            else:\n                self.participants[1].playerHash = choiceHash\n            # if(self.opponent[msg.sender]== True):\n            #     pass\n            #     # play_with_human()\n            # else:\n            #     self.play_with_agent()\n            #     if self.playerPayout[self.participants[0].playerAddr] == 0:\n            #         self.playerPayout[self.participants[0].playerAddr] += self.gameFee\n            self.game_counts += 1\n        if (self.game_counts == self.iter_counts - 1):\n            if(self.opponent[msg.sender]== True):\n                pass\n                # play_with_human()\n            else:\n                send(self.owner_address, self.playerPayout[self.participants[0].playerAddr])\n                self.playerPayout[self.participants[0].playerAddr] = 0\n            self.game_counts = 0",
  "sourcePath": "/home/maven/Sem_III/Blockchains/Assignments/Assignment_1/spsls_smart_contract/SPSLS_truffle/contracts/SPSLS.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b12+commit.a01cdc8"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x906f54F82CdfC715a5c3710691Dc37DDC99b5d0b",
      "transactionHash": "0x4161fb0d72dea41524438b4c9b43083d8d231d9c30776493b00945c404a9d3f8"
    }
  },
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-16T17:31:07.023Z"
}